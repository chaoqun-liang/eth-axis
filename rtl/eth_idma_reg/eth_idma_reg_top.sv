// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module eth_idma_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 7
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output eth_idma_reg_pkg::eth_idma_reg2hw_t reg2hw, // Write
  input  eth_idma_reg_pkg::eth_idma_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import eth_idma_reg_pkg::* ;

  localparam int DW = 64;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] maclo_addr_qs;
  logic [31:0] maclo_addr_wd;
  logic maclo_addr_we;
  logic [15:0] machi_mdio_upper_mac_address_qs;
  logic [15:0] machi_mdio_upper_mac_address_wd;
  logic machi_mdio_upper_mac_address_we;
  logic machi_mdio_promiscuous_qs;
  logic machi_mdio_promiscuous_wd;
  logic machi_mdio_promiscuous_we;
  logic machi_mdio_phy_mdclk_qs;
  logic machi_mdio_phy_mdclk_wd;
  logic machi_mdio_phy_mdclk_we;
  logic machi_mdio_phy_mdio_o_qs;
  logic machi_mdio_phy_mdio_o_wd;
  logic machi_mdio_phy_mdio_o_we;
  logic machi_mdio_phy_mdio_oe_qs;
  logic machi_mdio_phy_mdio_oe_wd;
  logic machi_mdio_phy_mdio_oe_we;
  logic [31:0] tx_fcs_qs;
  logic [31:0] rx_fcs_qs;
  logic [31:0] src_addr_qs;
  logic [31:0] src_addr_wd;
  logic src_addr_we;
  logic [31:0] dst_addr_qs;
  logic [31:0] dst_addr_wd;
  logic dst_addr_we;
  logic [31:0] num_bytes_qs;
  logic [31:0] num_bytes_wd;
  logic num_bytes_we;
  logic status_qs;
  logic status_re;
  logic [63:0] next_id_qs;
  logic next_id_re;
  logic [63:0] done_qs;
  logic done_re;

  // Register instances
  // R[maclo_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h890702)
  ) u_maclo_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (maclo_addr_we),
    .wd     (maclo_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.maclo_addr.q ),

    // to register interface (read)
    .qs     (maclo_addr_qs)
  );


  // R[machi_mdio]: V(False)

  //   F[upper_mac_address]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2301)
  ) u_machi_mdio_upper_mac_address (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (machi_mdio_upper_mac_address_we),
    .wd     (machi_mdio_upper_mac_address_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.machi_mdio.upper_mac_address.q ),

    // to register interface (read)
    .qs     (machi_mdio_upper_mac_address_qs)
  );


  //   F[promiscuous]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_machi_mdio_promiscuous (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (machi_mdio_promiscuous_we),
    .wd     (machi_mdio_promiscuous_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.machi_mdio.promiscuous.q ),

    // to register interface (read)
    .qs     (machi_mdio_promiscuous_qs)
  );


  //   F[phy_mdclk]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_machi_mdio_phy_mdclk (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (machi_mdio_phy_mdclk_we),
    .wd     (machi_mdio_phy_mdclk_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.machi_mdio.phy_mdclk.q ),

    // to register interface (read)
    .qs     (machi_mdio_phy_mdclk_qs)
  );


  //   F[phy_mdio_o]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_machi_mdio_phy_mdio_o (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (machi_mdio_phy_mdio_o_we),
    .wd     (machi_mdio_phy_mdio_o_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.machi_mdio.phy_mdio_o.q ),

    // to register interface (read)
    .qs     (machi_mdio_phy_mdio_o_qs)
  );


  //   F[phy_mdio_oe]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_machi_mdio_phy_mdio_oe (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (machi_mdio_phy_mdio_oe_we),
    .wd     (machi_mdio_phy_mdio_oe_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.machi_mdio.phy_mdio_oe.q ),

    // to register interface (read)
    .qs     (machi_mdio_phy_mdio_oe_qs)
  );


  // R[tx_fcs]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_tx_fcs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.tx_fcs.de),
    .d      (hw2reg.tx_fcs.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (tx_fcs_qs)
  );


  // R[rx_fcs]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_rx_fcs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.rx_fcs.de),
    .d      (hw2reg.rx_fcs.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (rx_fcs_qs)
  );


  // R[src_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_src_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (src_addr_we),
    .wd     (src_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_addr.q ),

    // to register interface (read)
    .qs     (src_addr_qs)
  );


  // R[dst_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_dst_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dst_addr_we),
    .wd     (dst_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_addr.q ),

    // to register interface (read)
    .qs     (dst_addr_qs)
  );


  // R[num_bytes]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_num_bytes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (num_bytes_we),
    .wd     (num_bytes_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.num_bytes.q ),

    // to register interface (read)
    .qs     (num_bytes_qs)
  );


  // R[status]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_status (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_qs)
  );


  // R[next_id]: V(True)

  prim_subreg_ext #(
    .DW    (64)
  ) u_next_id (
    .re     (next_id_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.next_id.d),
    .qre    (reg2hw.next_id.re),
    .qe     (),
    .q      (reg2hw.next_id.q ),
    .qs     (next_id_qs)
  );


  // R[done]: V(True)

  prim_subreg_ext #(
    .DW    (64)
  ) u_done (
    .re     (done_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.done.d),
    .qre    (reg2hw.done.re),
    .qe     (),
    .q      (reg2hw.done.q ),
    .qs     (done_qs)
  );




  logic [9:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == ETH_IDMA_MACLO_ADDR_OFFSET);
    addr_hit[1] = (reg_addr == ETH_IDMA_MACHI_MDIO_OFFSET);
    addr_hit[2] = (reg_addr == ETH_IDMA_TX_FCS_OFFSET);
    addr_hit[3] = (reg_addr == ETH_IDMA_RX_FCS_OFFSET);
    addr_hit[4] = (reg_addr == ETH_IDMA_SRC_ADDR_OFFSET);
    addr_hit[5] = (reg_addr == ETH_IDMA_DST_ADDR_OFFSET);
    addr_hit[6] = (reg_addr == ETH_IDMA_NUM_BYTES_OFFSET);
    addr_hit[7] = (reg_addr == ETH_IDMA_STATUS_OFFSET);
    addr_hit[8] = (reg_addr == ETH_IDMA_NEXT_ID_OFFSET);
    addr_hit[9] = (reg_addr == ETH_IDMA_DONE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(ETH_IDMA_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(ETH_IDMA_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(ETH_IDMA_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(ETH_IDMA_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(ETH_IDMA_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(ETH_IDMA_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(ETH_IDMA_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(ETH_IDMA_PERMIT[7] & ~reg_be))) |
               (addr_hit[8] & (|(ETH_IDMA_PERMIT[8] & ~reg_be))) |
               (addr_hit[9] & (|(ETH_IDMA_PERMIT[9] & ~reg_be)))));
  end

  assign maclo_addr_we = addr_hit[0] & reg_we & !reg_error;
  assign maclo_addr_wd = reg_wdata[31:0];

  assign machi_mdio_upper_mac_address_we = addr_hit[1] & reg_we & !reg_error;
  assign machi_mdio_upper_mac_address_wd = reg_wdata[15:0];

  assign machi_mdio_promiscuous_we = addr_hit[1] & reg_we & !reg_error;
  assign machi_mdio_promiscuous_wd = reg_wdata[16];

  assign machi_mdio_phy_mdclk_we = addr_hit[1] & reg_we & !reg_error;
  assign machi_mdio_phy_mdclk_wd = reg_wdata[17];

  assign machi_mdio_phy_mdio_o_we = addr_hit[1] & reg_we & !reg_error;
  assign machi_mdio_phy_mdio_o_wd = reg_wdata[18];

  assign machi_mdio_phy_mdio_oe_we = addr_hit[1] & reg_we & !reg_error;
  assign machi_mdio_phy_mdio_oe_wd = reg_wdata[19];

  assign src_addr_we = addr_hit[4] & reg_we & !reg_error;
  assign src_addr_wd = reg_wdata[31:0];

  assign dst_addr_we = addr_hit[5] & reg_we & !reg_error;
  assign dst_addr_wd = reg_wdata[31:0];

  assign num_bytes_we = addr_hit[6] & reg_we & !reg_error;
  assign num_bytes_wd = reg_wdata[31:0];

  assign status_re = addr_hit[7] & reg_re & !reg_error;

  assign next_id_re = addr_hit[8] & reg_re & !reg_error;

  assign done_re = addr_hit[9] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = maclo_addr_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[15:0] = machi_mdio_upper_mac_address_qs;
        reg_rdata_next[16] = machi_mdio_promiscuous_qs;
        reg_rdata_next[17] = machi_mdio_phy_mdclk_qs;
        reg_rdata_next[18] = machi_mdio_phy_mdio_o_qs;
        reg_rdata_next[19] = machi_mdio_phy_mdio_oe_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = tx_fcs_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = rx_fcs_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = src_addr_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = dst_addr_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = num_bytes_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = status_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[63:0] = next_id_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[63:0] = done_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module eth_idma_reg_top_intf
#(
  parameter int AW = 7,
  localparam int DW = 64
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output eth_idma_reg_pkg::eth_idma_reg2hw_t reg2hw, // Write
  input  eth_idma_reg_pkg::eth_idma_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  eth_idma_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


