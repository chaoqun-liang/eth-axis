// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module eth_framing_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 4
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output eth_framing_reg_pkg::eth_framing_reg2hw_t reg2hw, // Write
  input  eth_framing_reg_pkg::eth_framing_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import eth_framing_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] config0_qs;
  logic [31:0] config0_wd;
  logic config0_we;
  logic [15:0] config1_upper_mac_address_qs;
  logic [15:0] config1_upper_mac_address_wd;
  logic config1_upper_mac_address_we;
  logic config1_cooked_qs;
  logic config1_cooked_wd;
  logic config1_cooked_we;
  logic config1_loopback_qs;
  logic config1_loopback_wd;
  logic config1_loopback_we;
  logic [3:0] config1_spare_qs;
  logic [3:0] config1_spare_wd;
  logic config1_spare_we;
  logic config1_promiscuous_qs;
  logic config1_promiscuous_wd;
  logic config1_promiscuous_we;
  logic config1_irq_en_qs;
  logic config1_irq_en_wd;
  logic config1_irq_en_we;
  logic [10:0] config2_tx_packet_length_qs;
  logic [10:0] config2_tx_packet_length_wd;
  logic config2_tx_packet_length_we;
  logic [3:0] config2_tx_enable_dly_qs;
  logic [3:0] config2_tx_enable_dly_wd;
  logic config2_tx_enable_dly_we;
  logic config2_phy_mdclk_qs;
  logic config2_phy_mdclk_wd;
  logic config2_phy_mdclk_we;
  logic config2_phy_mdio_o_qs;
  logic config2_phy_mdio_o_wd;
  logic config2_phy_mdio_o_we;
  logic config2_phy_mdio_oe_qs;
  logic config2_phy_mdio_oe_wd;
  logic config2_phy_mdio_oe_we;
  logic [3:0] config2_lastbuf_qs;
  logic [3:0] config2_lastbuf_wd;
  logic config2_lastbuf_we;
  logic [3:0] config2_firstbuf_qs;
  logic [3:0] config2_firstbuf_wd;
  logic config2_firstbuf_we;

  // Register instances
  // R[config0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h890702)
  ) u_config0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config0_we),
    .wd     (config0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config0.q ),

    // to register interface (read)
    .qs     (config0_qs)
  );


  // R[config1]: V(False)

  //   F[upper_mac_address]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2301)
  ) u_config1_upper_mac_address (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config1_upper_mac_address_we),
    .wd     (config1_upper_mac_address_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config1.upper_mac_address.q ),

    // to register interface (read)
    .qs     (config1_upper_mac_address_qs)
  );


  //   F[cooked]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_config1_cooked (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config1_cooked_we),
    .wd     (config1_cooked_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config1.cooked.q ),

    // to register interface (read)
    .qs     (config1_cooked_qs)
  );


  //   F[loopback]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_config1_loopback (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config1_loopback_we),
    .wd     (config1_loopback_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config1.loopback.q ),

    // to register interface (read)
    .qs     (config1_loopback_qs)
  );


  //   F[spare]: 21:18
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_config1_spare (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config1_spare_we),
    .wd     (config1_spare_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config1.spare.q ),

    // to register interface (read)
    .qs     (config1_spare_qs)
  );


  //   F[promiscuous]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_config1_promiscuous (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config1_promiscuous_we),
    .wd     (config1_promiscuous_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config1.promiscuous.q ),

    // to register interface (read)
    .qs     (config1_promiscuous_qs)
  );


  //   F[irq_en]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_config1_irq_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config1_irq_en_we),
    .wd     (config1_irq_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config1.irq_en.q ),

    // to register interface (read)
    .qs     (config1_irq_en_qs)
  );


  // R[config2]: V(False)

  //   F[tx_packet_length]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_config2_tx_packet_length (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config2_tx_packet_length_we),
    .wd     (config2_tx_packet_length_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config2.tx_packet_length.q ),

    // to register interface (read)
    .qs     (config2_tx_packet_length_qs)
  );


  //   F[tx_enable_dly]: 14:11
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_config2_tx_enable_dly (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config2_tx_enable_dly_we),
    .wd     (config2_tx_enable_dly_wd),

    // from internal hardware
    .de     (hw2reg.config2.tx_enable_dly.de),
    .d      (hw2reg.config2.tx_enable_dly.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config2.tx_enable_dly.q ),

    // to register interface (read)
    .qs     (config2_tx_enable_dly_qs)
  );


  //   F[phy_mdclk]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_config2_phy_mdclk (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config2_phy_mdclk_we),
    .wd     (config2_phy_mdclk_wd),

    // from internal hardware
    .de     (hw2reg.config2.phy_mdclk.de),
    .d      (hw2reg.config2.phy_mdclk.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config2.phy_mdclk.q ),

    // to register interface (read)
    .qs     (config2_phy_mdclk_qs)
  );


  //   F[phy_mdio_o]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_config2_phy_mdio_o (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config2_phy_mdio_o_we),
    .wd     (config2_phy_mdio_o_wd),

    // from internal hardware
    .de     (hw2reg.config2.phy_mdio_o.de),
    .d      (hw2reg.config2.phy_mdio_o.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config2.phy_mdio_o.q ),

    // to register interface (read)
    .qs     (config2_phy_mdio_o_qs)
  );


  //   F[phy_mdio_oe]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_config2_phy_mdio_oe (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config2_phy_mdio_oe_we),
    .wd     (config2_phy_mdio_oe_wd),

    // from internal hardware
    .de     (hw2reg.config2.phy_mdio_oe.de),
    .d      (hw2reg.config2.phy_mdio_oe.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config2.phy_mdio_oe.q ),

    // to register interface (read)
    .qs     (config2_phy_mdio_oe_qs)
  );


  //   F[lastbuf]: 21:18
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_config2_lastbuf (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config2_lastbuf_we),
    .wd     (config2_lastbuf_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config2.lastbuf.q ),

    // to register interface (read)
    .qs     (config2_lastbuf_qs)
  );


  //   F[firstbuf]: 25:22
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_config2_firstbuf (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (config2_firstbuf_we),
    .wd     (config2_firstbuf_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.config2.firstbuf.q ),

    // to register interface (read)
    .qs     (config2_firstbuf_qs)
  );




  logic [2:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == ETH_FRAMING_CONFIG0_OFFSET);
    addr_hit[1] = (reg_addr == ETH_FRAMING_CONFIG1_OFFSET);
    addr_hit[2] = (reg_addr == ETH_FRAMING_CONFIG2_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(ETH_FRAMING_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(ETH_FRAMING_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(ETH_FRAMING_PERMIT[2] & ~reg_be)))));
  end

  assign config0_we = addr_hit[0] & reg_we & !reg_error;
  assign config0_wd = reg_wdata[31:0];

  assign config1_upper_mac_address_we = addr_hit[1] & reg_we & !reg_error;
  assign config1_upper_mac_address_wd = reg_wdata[15:0];

  assign config1_cooked_we = addr_hit[1] & reg_we & !reg_error;
  assign config1_cooked_wd = reg_wdata[16];

  assign config1_loopback_we = addr_hit[1] & reg_we & !reg_error;
  assign config1_loopback_wd = reg_wdata[17];

  assign config1_spare_we = addr_hit[1] & reg_we & !reg_error;
  assign config1_spare_wd = reg_wdata[21:18];

  assign config1_promiscuous_we = addr_hit[1] & reg_we & !reg_error;
  assign config1_promiscuous_wd = reg_wdata[22];

  assign config1_irq_en_we = addr_hit[1] & reg_we & !reg_error;
  assign config1_irq_en_wd = reg_wdata[23];

  assign config2_tx_packet_length_we = addr_hit[2] & reg_we & !reg_error;
  assign config2_tx_packet_length_wd = reg_wdata[10:0];

  assign config2_tx_enable_dly_we = addr_hit[2] & reg_we & !reg_error;
  assign config2_tx_enable_dly_wd = reg_wdata[14:11];

  assign config2_phy_mdclk_we = addr_hit[2] & reg_we & !reg_error;
  assign config2_phy_mdclk_wd = reg_wdata[15];

  assign config2_phy_mdio_o_we = addr_hit[2] & reg_we & !reg_error;
  assign config2_phy_mdio_o_wd = reg_wdata[16];

  assign config2_phy_mdio_oe_we = addr_hit[2] & reg_we & !reg_error;
  assign config2_phy_mdio_oe_wd = reg_wdata[17];

  assign config2_lastbuf_we = addr_hit[2] & reg_we & !reg_error;
  assign config2_lastbuf_wd = reg_wdata[21:18];

  assign config2_firstbuf_we = addr_hit[2] & reg_we & !reg_error;
  assign config2_firstbuf_wd = reg_wdata[25:22];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = config0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[15:0] = config1_upper_mac_address_qs;
        reg_rdata_next[16] = config1_cooked_qs;
        reg_rdata_next[17] = config1_loopback_qs;
        reg_rdata_next[21:18] = config1_spare_qs;
        reg_rdata_next[22] = config1_promiscuous_qs;
        reg_rdata_next[23] = config1_irq_en_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[10:0] = config2_tx_packet_length_qs;
        reg_rdata_next[14:11] = config2_tx_enable_dly_qs;
        reg_rdata_next[15] = config2_phy_mdclk_qs;
        reg_rdata_next[16] = config2_phy_mdio_o_qs;
        reg_rdata_next[17] = config2_phy_mdio_oe_qs;
        reg_rdata_next[21:18] = config2_lastbuf_qs;
        reg_rdata_next[25:22] = config2_firstbuf_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module eth_framing_reg_top_intf
#(
  parameter int AW = 4,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output eth_framing_reg_pkg::eth_framing_reg2hw_t reg2hw, // Write
  input  eth_framing_reg_pkg::eth_framing_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  eth_framing_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


